// Generated by CoffeeScript 1.8.0
(function() {
  var cheerio, fetch, request, sources,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  request = require('request');

  cheerio = require('cheerio');

  sources = require('./sources.json');

  fetch = function(source, callback) {
    return request(source.url, function(error, response, body) {
      var $, locations, responses, result;
      if (error) {
        throw error;
      }
      if (response.statusCode !== 200) {
        throw response;
      }
      result = [];
      switch (source.parser) {
        case 'lookingglass':
          $ = cheerio.load(body);
          locations = $('p:nth-child(2) b a');
          responses = [body];
          return locations.each(function(index, element) {
            return request($(element).attr('href'), function(error, response, body) {
              if (error) {
                throw error;
              }
              if (response.statusCode !== 200) {
                throw response;
              }
              responses.push(body);
              if (responses.length === locations.length + 1) {
                responses.forEach(function(body) {
                  var host, id, title;
                  $ = cheerio.load(body);
                  title = $('p:nth-child(2) b:nth-child(1)').text();
                  id = title.replace(/\W+/g, '_').replace(/^_+|_+$/g, '');
                  host = $('#information p:nth-child(1)').text().match(/\d+\.\d+\.\d+\.\d+/)[0];
                  return result.push({
                    id: id,
                    title: title,
                    host: host
                  });
                });
                return callback(result);
              }
            });
          });
        case 'regexp':
          body.match(new RegExp(source.location, 'g')).forEach(function(matched, index) {
            var id, pattern, replacement, title, _ref;
            title = matched.replace(new RegExp(source.location), '$1');
            if (source.location_replacements) {
              _ref = source.location_replacements;
              for (pattern in _ref) {
                replacement = _ref[pattern];
                title = title.replace(new RegExp(pattern, 'g'), replacement);
              }
            }
            id = title.replace(/\W+/g, '_').replace(/^_+|_+$/g, '');
            if (result[index] == null) {
              result[index] = {};
            }
            result[index].id = id;
            return result[index].title = title;
          });
          body.match(new RegExp(source.host, 'g')).forEach(function(matched, index) {
            var host, pattern, replacement, _ref;
            host = matched.replace(new RegExp(source.host, 'g'), '$1');
            if (source.host_replacements) {
              _ref = source.host_replacements;
              for (pattern in _ref) {
                replacement = _ref[pattern];
                host = host.replace(new RegExp(pattern, 'g'), replacement);
              }
            }
            if (result[index] == null) {
              result[index] = {};
            }
            return result[index].host = host;
          });
          return callback(result);
        default:
          $ = cheerio.load(body);
          $(source.location).each(function(index, element) {
            var id, pattern, replacement, title, _ref;
            if (source.location_replacements) {
              _ref = source.location_replacements;
              for (pattern in _ref) {
                replacement = _ref[pattern];
                element = $(element).html().replace(new RegExp(pattern, 'g'), replacement);
              }
            }
            title = $(element).text().replace(/^\s+|\s+$/g, '');
            id = title.replace(/\W+/g, '_').replace(/^_+|_+$/g, '');
            if (result[index] == null) {
              result[index] = {};
            }
            result[index].id = id;
            return result[index].title = title;
          });
          $(source.host).each(function(index, element) {
            var host, pattern, replacement, _ref;
            if (source.host_replacements) {
              _ref = source.host_replacements;
              for (pattern in _ref) {
                replacement = _ref[pattern];
                element = $(element).html().replace(new RegExp(pattern, 'g'), replacement);
              }
            }
            host = $(element).text().replace(/^\s+|\s+$/g, '');
            if (result[index] == null) {
              result[index] = {};
            }
            return result[index].host = host;
          });
          return callback(result);
      }
    });
  };

  sources.forEach(function(source) {
    return fetch(source, function(result) {
      var target, _i, _len, _ref, _results;
      console.log("+ " + source.id);
      console.log("menu = " + source.title);
      console.log("title = " + source.title);
      console.log("nomasterpoll = yes");
      console.log("");
      _results = [];
      for (_i = 0, _len = result.length; _i < _len; _i++) {
        target = result[_i];
        if (!(source.excludes && (_ref = target.host, __indexOf.call(source.excludes, _ref) >= 0))) {
          console.log("++ " + target.id);
          console.log("menu = " + target.title);
          console.log("title = " + target.title);
          console.log("host = " + target.host);
          console.log("slaves = railgun1 railgun2 railgun3");
          _results.push(console.log(""));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
  });

}).call(this);

//# sourceMappingURL=main.js.map
